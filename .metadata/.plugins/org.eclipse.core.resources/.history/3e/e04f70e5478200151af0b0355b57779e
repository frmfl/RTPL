module Esterel_Exam_Review :
	input RANDOM1, RANDOM2, RANDOM3;
	output TA_INTERVIEW, TA_SLEEPING;
	output STUD_WANTREVIEW, STUD_INREVIEW;
	output STUDENTS_WAITING := 0 : combine integer with +;
	
	run TA; % never terminates
	 ||
	% produce random student pattern:
	
	% student Kevin
	loop
		await RANDOM1;
		run KEVIN / STUDENT;	% blocks until this instance finishes
	end loop;
	 ||
	% student Stuart
	loop await RANDOM2;
		run STUART / STUDENT;	% blocks until this instance finishes
	end loop;	 
	 ||
	% student Bob
	loop await RANDOM3;
		run BOB / STUDENT;	% blocks until this instance finishes
	end loop;
	
end module

module TA:	
	output TA_SLEEPING, TA_INREVIEW;
	loop
		emit TA_SLEEPING;
		pause;
	end loop;
end module



module STUDENT:
	
	input TA_INREVIEW;
	
	% C
	input STUDENTS_WAITING : combine integer with +; % to increment number of waiting students
	
	input TA_SLEEPING;
	%
	
	output STUD_INREVIEW, STUD_WANTREVIEW;
	
	constant const_TOTAL_SEATS : integer;
	
	
		if (?STUDENTS_WAITING) < const_TOTAL_SEATS then  %if at least one free seat

		%	if (?STUDENTS_WAITING) != 0 then
				
				%trap 
				trap T1 in
				[
					% if TA has no time, student waits for review
					present TA_INREVIEW then sustain STUD_WANTREVIEW end;	% should be sustained until review starts
				]
				||
				[
					emit STUDENTS_WAITING(1);
					await immediate TA_SLEEPING;	%wait for TA accepting me, meanwhile increment STUDENTS_WAITING
					exit T1;			
				]
				end trap;
			
				emit STUD_INREVIEW; % output that student is in review
				emit STUDENTS_WAITING(-1); % Student is not waiting anymore
				
				
			
		%	end if;
			
		else
		
		nothing; %nothing. Student disappears because waiting room is full.
		
		end if;
		
end module


		