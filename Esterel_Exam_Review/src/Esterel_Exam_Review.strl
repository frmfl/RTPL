module Esterel_Exam_Review:
	input RANDOM1, RANDOM2, RANDOM3;
	output TA_INREVIEW, TA_SLEEPING;
	output WANT_REVIEW;
	output STUD_WANTREVIEW, STUD_INREVIEW;
	output TA_DISMISS_STUD;
	output STUDENTS_WAITING := 0 : combine integer with +;
	output TA_INSANE, STUD_INSANE, RACECONDITION, DEADLOCK, TA_TOOSLOW, STUD_STARVATION, STUD_WAITING1, STUD_WAITING2, STUD_WAITING3;

	output num_INREVIEWSTUDS :=0 : combine integer with +;
	output PRIO_counter :=0 : combine integer with +;
	output cycles_STARVATION1 :=0 : integer;
	output cycles_STARVATION2 :=0 : integer;
	output cycles_STARVATION3 :=0 :  integer;
	output WL_position_sig_1 := 0 : integer;
	output WL_position_sig_2 :=0 : integer; 
	output WL_position_sig_3 := 0 : integer;
	
	output STUD_WANTREVIEW1, STUD_INREVIEW1, STUD_WANTREVIEW2, STUD_INREVIEW2, STUD_WANTREVIEW3, STUD_INREVIEW3;
	
	
	run TA; % never terminates
	 ||
	 
	% produce random student pattern:
	
	% student Kevin
	loop await RANDOM1;
		% Student super insane
		present pre(STUD_WANTREVIEW1) or pre(STUD_INREVIEW1) then
		nothing;
		else
		run KEVIN / STUDENT [ constant 1/ const_prio; constant 2 / const_TOTAL_SEATS; signal STUD_WANTREVIEW1 / STUD_WANTREVIEW, STUD_INREVIEW1 / STUD_INREVIEW, WL_position_sig_1/ WL_position_sig ];	% blocks until this instance finishes
		end present;
	end loop;
	 ||
	% student Stuart
	loop await RANDOM2;
	present pre(STUD_WANTREVIEW2) or pre(STUD_INREVIEW2) then
		nothing;
		else
		run STUART / STUDENT [ constant 2/ const_prio; constant 2 / const_TOTAL_SEATS; signal STUD_WANTREVIEW2 / STUD_WANTREVIEW, STUD_INREVIEW2 / STUD_INREVIEW, WL_position_sig_2/ WL_position_sig ];	% blocks until this instance finishes
		end present;
	end loop;	 
	 ||
	% student Bob
	loop await RANDOM3;
	present pre(STUD_WANTREVIEW3) or pre(STUD_INREVIEW3) then
		nothing;
		else
		run BOB / STUDENT [ constant 3/ const_prio; constant 2 / const_TOTAL_SEATS; signal STUD_WANTREVIEW3 / STUD_WANTREVIEW, STUD_INREVIEW3 / STUD_INREVIEW, WL_position_sig_3/ WL_position_sig ];	% blocks until this instance finishes
		end present;
	end loop;
	 ||
	loop
		present STUD_WANTREVIEW1 or STUD_WANTREVIEW2 or STUD_WANTREVIEW3 then 
			emit STUD_WANTREVIEW;
		end present;
			
		pause;
	end loop;
		||
		loop
		present STUD_INREVIEW1 or STUD_INREVIEW2 or STUD_INREVIEW3 then 
			emit STUD_INREVIEW;
		end present;
			
		pause;
	end loop;
	
	||
	
	run OBSERVER; % never terminates
		
	
end module

%%%%%%%%%%%%%%%%%%%%%%%%%% STUDENT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

module STUDENT :
	
	input TA_INREVIEW, TA_SLEEPING;
	
	input STUDENTS_WAITING : integer; % to increment number of waiting students
	
	input TA_DISMISS_STUD; % from TA
	output PRIO_counter : integer;
	input WL_position_sig : integer;
	
	output STUD_INREVIEW, STUD_WANTREVIEW;
	
	constant const_TOTAL_SEATS : integer;
	constant const_prio : integer;
	
	signal TA_WAS_SLEEPING in
	
	% use pre assign priorities for each student to avoid starvation and order of assignment to waiting seats	
			emit PRIO_counter(const_prio);
		
		
			trap T0 in
			[
		
			%if at least one free seat
			if ((pre(?STUDENTS_WAITING)) < const_TOTAL_SEATS  ) then  
				if const_prio = 3 then
				
					emit WL_position_sig(pre(?STUDENTS_WAITING));
					
				elsif const_prio = 2 then	
					if ?PRIO_counter >= 5 then
						emit WL_position_sig(pre(?STUDENTS_WAITING)+1);
					else 
						emit WL_position_sig(pre(?STUDENTS_WAITING));
					end if;					
				else
				
					if ?PRIO_counter = 1 then
						
						emit WL_position_sig(pre(?STUDENTS_WAITING));
						
					elsif ?PRIO_counter = 3 or ?PRIO_counter = 4 then
						
						emit WL_position_sig(pre(?STUDENTS_WAITING)+1);
						
					else					

						emit WL_position_sig(pre(?STUDENTS_WAITING)+2);
						
					end if;
					
				end if;	
		
				% student arriving at the office 
				emit STUDENTS_WAITING(1);
					
				trap T2 in
				[		
					trap T1 in
				
					[
					present TA_SLEEPING then
						emit TA_WAS_SLEEPING
					end present;
					
					loop
						
						% wake up signal for TA, if he sleeps. Else, tell that you are waiting. 
						emit STUD_WANTREVIEW;
						
						% exit trap and go to review if TA is sleeping and students come at the same time
						if ?WL_position_sig < 1 then
							exit T1;
						end;	
						% wait one cycle before going in review or decrease waiting counter			
						pause;	
											
						present pre(TA_WAS_SLEEPING) then
							emit TA_WAS_SLEEPING
						end present;
						
						emit WL_position_sig(pre(?WL_position_sig)-1);
						
						% exit trap and go to review if TA is in review and first position on waiting list
						if (?WL_position_sig <1) then
							present pre(TA_WAS_SLEEPING) then
								nothing
							else
								exit T2;
							end present;
						end;				

					end loop
				] % end trap t1
				end trap;
				
			pause;
			] % end trap t2
			end trap;
			
			emit STUD_INREVIEW;

			else
		
			nothing; %nothing. Student disappears because waiting room is full.
		
			end if;
			
			]
			end trap;
			
	end signal;
	
end module



%%%%%%%%%%%%%%%%%%%%%%%%%% TA %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

module TA:	

	input STUDENTS_WAITING : integer;
	input STUD_WANTREVIEW;
	output TA_SLEEPING, TA_INREVIEW;
	
	loop	 
		emit STUDENTS_WAITING(pre(?STUDENTS_WAITING));
		
		present pre(STUD_WANTREVIEW) then 
				
				emit TA_INREVIEW;
				
				emit STUDENTS_WAITING(-1);
		
		else
		
			emit TA_SLEEPING
		
		end present;
		
		pause;
		
	end loop;
end module



%%%%%%%%%%%%%%%%%%%%%% OBSERVER %%%%%%%%%%%%%%%%%%%%%%%%%%%%

module OBSERVER:
	input TA_INREVIEW, TA_SLEEPING; 
	input STUD_INREVIEW1, STUD_INREVIEW2, STUD_INREVIEW3, STUD_WANTREVIEW1, STUD_WANTREVIEW2, STUD_WANTREVIEW3;
	input STUD_WANTREVIEW, STUD_INREVIEW;
	output TA_INSANE, STUD_INSANE, RACECONDITION, DEADLOCK, TA_TOOSLOW;
	output STUD_WAITING1, STUD_WAITING2, STUD_WAITING3;

	loop
		
		%%%%%%%%%%%%% INSANE Everyone %%%%%%%%%%%%%%%
		%TA is not in both states at once
		present (TA_INREVIEW and TA_SLEEPING) then
			emit TA_INSANE;
		end present;
		
		% STUDENT is not in both states at once
		present (STUD_INREVIEW1 and STUD_WANTREVIEW1) then
			emit STUD_INSANE;
		end present;
		present (STUD_INREVIEW2 and STUD_WANTREVIEW2) then
			emit STUD_INSANE;
		end present;
		present (STUD_INREVIEW3 and STUD_WANTREVIEW3) then
			emit STUD_INSANE;
		end present;
		
		
		%%%%%%%%%%%%% RACECONDITION %%%%%%%%%%%%%%%
		% Racecondition if more than one student is IN_REVIEW!
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		present (STUD_INREVIEW1 and STUD_INREVIEW2) then
		emit RACECONDITION;
		end present;
		
		present (STUD_INREVIEW2 and STUD_INREVIEW3) then
		emit RACECONDITION;
		end present;
		
		present (STUD_INREVIEW1 and STUD_INREVIEW3) then
		emit RACECONDITION;
		end present;
		
		
		%%%%%%%%%%%%% DEADLOCK %%%%%%%%%%%%%%%%%%%%
		% Deadlock if TA sleeps while a student requests Review!
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		present TA_SLEEPING and STUD_WANTREVIEW then
		emit DEADLOCK;		
		end present ;
		
		%%%%%%%%%%%%% TA_TOOSLOW %%%%%%%%%%%%%%%%%%
		% Too Slow if DEADLOCK present for more than one tick!
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		present pre(DEADLOCK) then
			present DEADLOCK then
				emit TA_TOOSLOW;
			end present;
		end present;
		
			

				
		pause;
	end loop;
end module


