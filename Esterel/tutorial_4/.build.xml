<?xml version="1.0" encoding="UTF-8"?>
<project name="EsterelBuild" default="simxes" basedir=".">
	<description>
        Ant Builder for generic Esterel Eclipse projects. 
        </description>

	<!-- properties can be handed over as arguments, some are necessary -->
	<property name="project.dir" value="." />
	<!-- the directory of the project to build...will be set by the AntInvoker. This is the abolute project path. -->
	<property name="sources.dir" value="${project.dir}/src" />
	<!-- where to look for Esterel source files -->
	<property name="gen.dir" value="${project.dir}/gen" />
	<!-- where Esterel-generated code for target is written to -->
	<property name="sim.dir" value="${gen.dir}/sim" />
	<!-- where Esterel-generated code for simulation is written to -->
	<property name="esterel_rtpl_framework.dir" value="/opt/RTPL_Framework_Esterel" />
	<property name="esterel.dir" value="/opt/esterel" /><!-- the Esterel tools base directory is located -->	
	
	<!-- following two paths are defined by the Framework -->
	<property name="avr_target.dir" value="${project.dir}/AVRTarget" /><!-- the folder within this project where the makefile for AVR resides -->	
	<property name="sim_target.dir" value="${project.dir}/SimulationTarget" /><!-- local path relative to project root where the robot simulation is copied to-->
	
	<!-- the path where C-files, Makefile etc. for Pololu 3pi are located -->
	<property name="project.name" value="main" />
	<!-- name of the Eclipse project, set by the builder plugin. -->
	<property name="mainmodule" value="${project.name}" />
	<!-- the main module of the Esterel code. Is mapped to project name, but can be modified here -->
	<property name="simname" value="sim_${project.name}"/>
	<!-- the name of the code and executable for localhost simulation -->
	<property name="targetname" value="${project.name}"/>
	<!-- the name of the code and executable for the target -->

	<!-- some internal stuff -->
	<property name="run" value="false" />
	<property name="build" value="false" />
	<property name="check" value="false" />

	<!-- invoke Esterel compiler to generate c-code for local simulation. -->
	<target name="simbuild" depends="prepare" if="build" description="Invokes the Esterel compiler to build C-code for localhost simulation with XES.">
		<!-- TODO: do without Shell to get more portable. shell is abused for globbing here -->
		<exec executable="sh" failonerror="true" newenvironment="true" dir="${sim.dir}">
			<arg value="-c" />
			<!-- output name is main module's name -->
			<arg value="esterel -simul -main ${mainmodule} -B${simname} ${sources.dir}/*.strl" />
		</exec>
	</target>

	<!-- invoke Esterel compiler (code gen), out-of-source build -->
	<target name="build" depends="prepare" if="build" description="Invokes the Esterel compiler to generate C-code.">
		<!-- TODO: do without Shell to get more portable. shell is abused for globbing here -->
		<exec executable="sh" failonerror="true" newenvironment="true" dir="${gen.dir}">
			<arg value="-c" />
			<!-- output name is main module's name -->
			<arg value="esterel -main ${mainmodule} -B${targetname} ${sources.dir}/*.strl" />
		</exec>
	</target>
	
	<!-- translate c-file to object file needed for simulation (no linking done) -->
	<target name="obuild" depends="simbuild" if="build">
		<!-- TODO: do without sh to get more portable. Bash is abused for globbing here -->
		<exec executable="sh" failonerror="true" newenvironment="true" dir="${sim.dir}">
			<arg value="-c" />
			<arg value="gcc -o ${simname}.o -c ${simname}.c" />
		</exec>
	</target>

	<!-- spawn esterel simulator (XES) -->
	<target name="simxes" depends="obuild" if="run" description="Invokes XES to simulate esterel program">
		<!-- we need the terminal emulation here, otherwise the process had no tty, which would cause xes to fail -->
		<exec executable="gnome-terminal" spawn="true" newenvironment="true" dir="${sim.dir}">
			<arg line="-x xes -D ${sources.dir} ${sim.dir}/${simname}.o" />
		</exec>
	</target>

	<target name="clean" if="build" depends="" description="Recursively cleans files generated by Esterel within ${gen.dir}.">
		<delete includeemptydirs="true" quiet="false" failonerror="false">
			<fileset dir="${gen.dir}/">
				<include name="**/*.h"/>
				<include name="**/*.c"/>				
				<include name="**/*.o"/>			
			</fileset>
		</delete>
	</target>
				
	<!-- TODO: simopengl -->

	<target name="robot_checkfiles" if="build" depends="prepare">
		<fail message="You must have a file called '*.strl' in the folder ${sources.dir} within your project to build files for Pololu 3pi!">
			<condition>
				<not>
					<resourcecount count="1">
						<fileset id="fs" dir="${sources.dir}" includes="*.strl" />
					</resourcecount>
				</not>
			</condition>
		</fail>
		<!-- remove all the generated code from simulation. This would disturb the build process for the robot. -->
		<delete includeemptydirs="false" quiet="false" failonerror="false">
			<fileset dir="${sim.dir}">
				<include name="**/*"/>
			</fileset>
		</delete>			
	</target>

	<target name="robot_getframework" if="build" depends="robot_checkfiles">
		<copy todir="${project.dir}" overwrite="false">
			<fileset dir="${esterel_rtpl_framework.dir}" />
		</copy>
	</target>

	<target name="robot_sim_build" if="build" depends="build,robot_getframework" description="Pololu 3pi: Builds the openGL simulation.">
		<exec executable="sh" failonerror="true" newenvironment="true" dir="${sim_target.dir}">
			<arg value="-c" />
			<arg value="make all CDEFSPARAM='-DESTEREL_MODULE_NAME=${mainmodule}'" />
		</exec>
	</target>
		
	<target name="robot_sim_run" if="run" depends="robot_sim_build" description="Pololu 3pi: Runs the openGL simulation.">
		<exec executable="sh" failonerror="false" spawn="true" newenvironment="true" dir="${sim_target.dir}">
			<arg value="-c" />
			<arg value="./PololuSimulation" />
		</exec>
	</target>
	
	<target name="robot_build" if="build" depends="robot_getframework,build" description="Pololu 3pi: Invokes Makefile to link program framework">
		<exec executable="sh" failonerror="true" newenvironment="true" dir="${avr_target.dir}">
			<arg value="-c" />
			<arg value="make CDEFSPARAM='-DESTEREL_MODULE_NAME=${mainmodule}' all" />
		</exec>
	</target>

	<target name="robot_clean" if="build" depends="robot_getframework" description="Pololu 3pi: Invokes Makefile to clean files.">
		<exec executable="sh" failonerror="true" newenvironment="true" dir="${avr_target.dir}">
			<arg value="-c" />
			<arg value="make clean" />
		</exec>
		<exec executable="bash" failonerror="true" newenvironment="true" dir="${sim_target.dir}">
			<arg value="-c" />
			<arg value="make clean" />
		</exec>
	</target>

	<target name="robot_flash" depends="robot_build" if="run" description="Pololu 3pi: Flashes the robot">
		<exec executable="sh" failonerror="true" newenvironment="true" dir="${avr_target.dir}">
			<arg value="-c" />
			<arg value="make program" />
		</exec>
	</target>

	<!-- model checking -->
	<target name="generate_blif" depends="" if="check" description="Model checking: create logical circuit description">
		<exec executable="sh" failonerror="true" newenvironment="true" dir="${sources.dir}">
			<arg value="-c" />
			<arg value="esterel -main ${mainmodule} -B${targetname} -Lblif:'-soft' ${sources.dir}/*.strl -D${gen.dir}" />
		</exec>
	</target>
	
	<!-- spawn esterel simulator (XES) -->
	<target name="checkxeve" depends="generate_blif" if="check" description="Start XEVE for model-checking.">
		<!-- we need the terminal emulation here, otherwise the process had no tty, which would cause xes to fail -->
		<exec executable="gnome-terminal" spawn="true" newenvironment="true" dir="${gen.dir}">
			<arg line="-x xeve" />
		</exec>
	</target>
	
	<!-- create necessary folders for output -->
	<target name="prepare">
		<mkdir dir="${project.dir}" />
		<mkdir dir="${gen.dir}" />
		<mkdir dir="${sim.dir}" />
		<mkdir dir="${sources.dir}" />	
	</target>

</project>